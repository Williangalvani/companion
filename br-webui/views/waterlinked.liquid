{% include ../_includes/header.liquid %}

<!-- These next two will only work with internet, and that is fine. -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
	integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
	crossorigin="" />
<!-- Make sure you put this AFTER Leaflet's CSS -->
<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
	integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
	crossorigin=""></script>


<link href="css/bootstrap-switch.css" rel="stylesheet">
<script src="js/bootstrap-switch.js"></script>

<script src="socket.io-file-client.js"></script>
<script>
	var socket = io();

	let hostnameTimeout = undefined;

	var map;
	var marker;

	function restartWLDriver() {
		const ip = document.getElementById('wlIP').value;
		const port = document.getElementById('wlPort').value;
		const args = {}
		if (ip.length) {
			args.ip = ip;
		}
		if (port.length) {
			args.port = port;
		}
		socket.emit('restart WL driver', args);
	}

	function restartDvlDriver() {
		const ip = document.getElementById('dvl-ip').value;
		const args = {}
		if (ip.length) {
			args.ip = ip;
		}
		socket.emit('restart DVL driver', args);
	}

	updateGpsStatus = function () {
		const request = new XMLHttpRequest();
		request.open('GET', '/serviceStatus?service=waterlinked', true);
		request.timeout = 800;
		request.onload = function () {
			if (this.status >= 200 && this.status < 400) {
				document.getElementById('waterlinked-status').innerHTML = this.response
				console.log(this.response)
			}
		}
		request.onerror = function () {
			document.getElementById('waterlinked-status').innerHTML = "Lost connection to Companion"
		};
		request.ontimeout = request.onerror;
		request.send();
	}

	/* Fetchs backend status and updates frontend accordingly */
	function updateDvlStatus() {
		const request = new XMLHttpRequest();
		request.timeout = 800;
		request.open('GET', '/api/waterlinked-dvl/get_status', true);

		request.onload = function () {
			if (this.status < 200 || this.status >= 400) {
				return
			}
			const data = JSON.parse(this.response)
			// Fill status field
			document.getElementById('dvl-status').innerHTML = data.status
			// Set On/Off toggle to backend state
			$("#enable-switch").bootstrapSwitch("state", Boolean(data.enabled));
			$("#enable-rangefinder").bootstrapSwitch("state", Boolean(data.rangefinder));
			// Set Radio toggles to backend state
			$("#orientation1").prop('checked', data.orientation == 1);
			$("#orientation2").prop('checked', data.orientation == 2);
			// $("lat").value = data.origin[0]
			// $("long").value = data.origin[1]
			// marker.setLatLng(L.latLng(data.origin))

			// Fills IP field and
			if (document.getElementById('dvl-ip').value == "") {
				document.getElementById('dvl-ip').value = data.hostname
			}
			// hide spinner if appropriate
			if (data.hostname == document.getElementById('dvl-ip').value) {
				$(".spinner").hide()
			}
		}
		request.onerror = function () {
			document.getElementById('dvl-status').innerHTML = "Unable to talk to DVL service"
		};
		request.ontimeout = request.onerror
		request.send();
	}

	/* Toggles driver on/off */
	function setDvlEnabled(event) {
		const request = new XMLHttpRequest();
		request.timeout = 800;
		request.open('GET', '/api/waterlinked-dvl/enable/' + event.target.checked, true);
		request.send();
	}

	/* Toggles driver on/off */
	function setDvlAsRangefinder(event) {
		const request = new XMLHttpRequest();
		request.timeout = 800;
		request.open('GET', '/api/waterlinked-dvl/use_as_rangefinder/' + event.target.checked, true);
		request.send();
	}

	/* Sets dvl orientation (Down/Forward) */
	function setDvlOrientation(orientation) {
		const request = new XMLHttpRequest();
		request.timeout = 800;
		request.open('GET', '/api/waterlinked-dvl/orientation/' + orientation, true);
		request.send();
	}

	/* Sets DVL hostname (usually waterlinked-dvl.local) */
	function setDvlHostname() {
		$(".spinner").show()
		clearTimeout(hostnameTimeout);
		hostnameInterval = setTimeout(function () {
			const request = new XMLHttpRequest();
			const ip = document.getElementById('dvl-ip').value;
			request.timeout = 800;
			request.open('GET', '/api/waterlinked-dvl/hostname/' + ip, true);
			request.send();
		}, 500)
	}

	function setNewOrigin() {
		const lat = document.getElementById("lat").value
		const long = document.getElementById("long").value
		const request = new XMLHttpRequest();
		request.timeout = 800;
		request.open('GET', '/api/waterlinked-dvl/origin/' + lat + '/' + long, true);
		request.send();
	}

	// Update at 1 Hz
	updateGpsStatus();
	updateDvlStatus();
	setInterval(updateGpsStatus, 1000);
	setInterval(updateDvlStatus, 1000);

</script>

<h1>Waterlinked Driver Setup</h1>

<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Water Linked <b>Underwater GPS</b> Driver
				</h3>
			</div>
			<div class="panel-body">
				<div id="udpConfig">
					<div class="form-group">
						<label>Underwater GPS IP Address:</label>
						<input type="text" class="form-control" id="wlIP" value="192.168.2.94"></input>
					</div>
					<div class="form-group">
						<label>Underwater GPS Port:</label>
						<input type="text" class="form-control" id="wlPort" value="80"></input>
					</div>
					<button type="button" class="btn btn-primary" onclick="restartWLDriver()">Restart Underwater GPS
						Driver</button>
				</div>
				<h4>Status</h4>
				<div>
					<textarea readonly style="width:100%;" id="waterlinked-status"></textarea>
				</div>
			</div>
		</div>
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Water Linked <b>DVL</b> Driver </h3>
			</div>
			<div class="panel-body">
				<div class="row"></div>
				<div id="udpConfig" class="col-md-4">
					<h4>Driver Enable</h4>
					<input type="checkbox" id="enable-switch" checked
					style="display: none;">
					<div class="form-group" style="margin-top: 10px;">
						<label>DVL IP Address:<i class="fa fa-spinner spinner" id="dvl-ip-spinner"
								aria-hidden="true"></i></i></label>
						<input type="text" class="form-control" id="dvl-ip" value=""
							oninput="setDvlHostname();"></input>
					</div>
				</div>

				<div class="col-md-4">
					<h4>Orientation</h4>
					<div class="form-check">
						<input class="form-check-input" type="radio" name="exampleRadios" id="orientation1"
							onclick="setDvlOrientation(1);">
						<label class="form-check-label" for="orientation1">
							Down
						</label>
					</div>
					<div class="form-check">
						<input class="form-check-input" type="radio" name="exampleRadios" id="orientation2"
							onclick="setDvlOrientation(2);">
						<label class="form-check-label" for="orientation2">
							Forward (Experimental)
						</label>
					</div>
				</div>
				<div class="col-md-4">
					<h4>Use as rangefinder 
					</h4>
					<input type="checkbox" id="enable-rangefinder">
					<h4>Restart DVL service</h4>
					<button type="button" class="btn btn-primary"
							onclick="restartDvlDriver()">Restart</button>
				</div>



				<div class="col-md-12">
					<h3>Set Origin</h3>
					<div id="mapid" style="height: 400px;"></div>
					<form>
						<label for="lat">Latitude:</label>
						<input type="text" id="lat" name="lat" value="33.841456" oninput="plotCircleCoords(true);">
						<label for="long">Longitude:</label>
						<input type="text" id="long" name="long" value="-118.335212" oninput="plotCircleCoords(true);">
					</form>
					<button type="button" class="btn btn-primary" onclick="setNewOrigin();">Set new Origin</button>
					<hr>
					<h4>Status</h4>
					<div>
						<textarea readonly style="width:100%;"
							id="dvl-status"> Internet connection required to use the map view</textarea>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
</div>
</div>
<script>
	$("#enable-switch").on('switchChange.bootstrapSwitch', function (event, state) {
		$(this).trigger('change');
	});
	$("#enable-switch").change(setDvlEnabled);
	$("#enable-switch").bootstrapSwitch();

	$("#enable-rangefinder").on('switchChange.bootstrapSwitch', function (event, state) {
		$(this).trigger('change');
	});
	$("#enable-rangefinder").change(setDvlAsRangefinder);
	$("#enable-rangefinder").bootstrapSwitch();
	map = L.map('mapid').setView([0, 0], 1);
	L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
		attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
	}).addTo(map);

	marker = L.marker([33.841456, -118.335212], { title: "New Origin", draggable: true })
		.addTo(map)
		.on('dragend', function (event) {
			document.getElementById("lat").value = event.latlng.lat
			document.getElementById("long").value = event.latlng.lng
		});

	map.on('click', function (e) {
		document.getElementById("lat").value = e.latlng.lat
		document.getElementById("long").value = e.latlng.lng
		marker.setLatLng(e.latlng)
		map.setView([e.latlng.lat, e.latlng.lng])
	});
</script>
{% include ../_includes/footer.liquid %}